#!/usr/bin/env bash

# Show miscellaneous status lines if they fit certain conditions. For example - if
# there are any uncommitted changes in dotfiles, state it. Otherwise print nothing.
#
# TODO:
#  - Refactor this to be templated.
#    - All of these statuses could be boiled down to:
#      - a command to run which generates a number
#      - an expected range for that number
#      - formatted output to show if out of range - may contain the output of the above
#        command or an additional command
#    - In most cases, both commands are the same
#  - This is run by conky, and when there is no output, there is still a small conky
#    window. It would be possible to hide that conky window with this script when there
#    is no output - see here https://bbs.archlinux.org/viewtopic.php?pid=1161379#p1161379
#

# show battery health if lower than this value
THRESHOLD_BATTERY_HEALTH=70
# show fan RPMs if over this value
THRESHOLD_FAN_SPEED_RPMS=3000
# show 'X free space left in home' message if less than this many GB free
THRESHOLD_HOME_DIR_GB=50
# show load if 1-minute load average is over this value
THRESHOLD_LOAD_AVG=1.49


#######################################################################################
# debian / software state

# grab load first since the following commands will use cpu and affect the values
load_average=$(cat /proc/loadavg | cut -d ' ' -f 1,2,3)

garbage_files=$(garbage | wc -l)
if [ "$garbage_files" -gt 0 ]; then
    echo "${garbage_files} garbage files in /home"
fi

# sudo apt update  # not enabled because updating needs sudo
upgradable_packages=$(( $(apt list --upgradeable 2>/dev/null | wc -l) - 1 ))
if [ "$upgradable_packages" -gt 0 ]; then
    echo "${upgradable_packages} upgradeable apt packages"
fi

is_repo_uncommitted() {
    cd $1
    git_status=$(git status 2>&1)
    if echo "$git_status" | grep "fatal: Not a git repository" > /dev/null; then
        return 1
    elif echo "$git_status" | grep "working tree clean" > /dev/null; then
        return 1
    else
        return 0
    fi
}
if is_repo_uncommitted "${HOME}/dotfiles"*; then
    echo "dotfiles have uncommitted changes"
fi

dotfiles_commits_ahead=$(cd ${HOME}/dotfiles*; git status | egrep -o "Your branch is ahead .+ by [0-9]+" | egrep -o "[0-9]+$")
if [ $? -eq 0 ]; then
    echo "dotfiles ahead of origin by ${dotfiles_commits_ahead} commits"
fi

unstowed_dotfiles=$(cd ${HOME}/dotfiles*; stow -v --no *[^etc]/ 2>&1 | grep LINK | wc -l)
if [ "$unstowed_dotfiles" -gt 0 ]; then
    echo "${unstowed_dotfiles} unstowed dotfiles"
fi

unsaved_repos=""
unsaved_repo_count=0
for folder in "${HOME}/repos/"*/; do
    if is_repo_uncommitted "$folder"; then
        unsaved_repos+=" $(basename ${folder})"
        unsaved_repo_count=$(( $unsaved_repo_count + 1 ))
    fi
done
if [ "$unsaved_repo_count" -gt 0 ]; then
    echo "${unsaved_repo_count} unsaved repos:$unsaved_repos"
fi

if ! systemctl --user status syncthing@${USER}.service > /dev/null 2>&1; then
    echo "syncthing is not running"
fi

if ! systemctl --user status redshift.service > /dev/null 2>&1; then
    echo "redshift is not running"
fi

if ! systemctl --user status arq.service > /dev/null 2>&1; then
    echo "arq is not running"
fi

#######################################################################################
# resource usage

#uptime -p | cut -d ',' -f 1,2

load_average_1m=$(echo "$load_average" | cut -d ' ' -f 1)
if (( $(echo "$load_average_1m > $THRESHOLD_LOAD_AVG" | bc -l) )); then
    echo "load average is ${load_average}"
fi

free_space_home=$(df /home -h --output='avail' | grep -v "Avail" | egrep -o "[0-9]+[A-Za-z]+")
free_space_home_gb=$(echo "scale=1; $(df /home --output='avail' | grep -v "Avail") / 1024 / 1024" | bc)
if (( $(echo "$free_space_home_gb < $THRESHOLD_HOME_DIR_GB" | bc -l) )); then
    echo "only ${free_space_home_gb} GB available in /home"
fi

#######################################################################################
# hardware status

battery_health=$(xmobar_battery.py BAT0 --template "<health>")
if [ "$battery_health" -le $THRESHOLD_BATTERY_HEALTH ]; then
    echo "battery health is ${battery_health}%"
fi

fan_rpms=$(sensors | egrep -o "[0-9.]+ RPM" | sed -e "s/RPM//g")
total_rpms=0
fan_count=0
while read -r rpm_val; do
    total_rpms=$(( $total_rpms + $rpm_val ))
    fan_count=$(( $fan_count + 1 ))
    #echo "... $line ..."
done <<< "$fan_rpms"
average_rpms=$(( $total_rpms / $fan_count ))
average_krpms=$(echo "scale=1; $average_rpms / 1000.0" | bc)

if [[ "$average_rpms" -ge $THRESHOLD_FAN_SPEED_RPMS ]]; then
    echo "fan: ${average_krpms}k RPMs"
fi


#######################################################################################
# news, online, etc

is_network_connected() {
    ip addr | egrep "(enp[0-9]+s[0-9]+|wlp[0-9]+s[0-9]+|eth[0-9]+|ens[0-9]+)" | grep "state UP" > /dev/null
}

cached_curl() {
    cache_dir="/tmp/"$USER"/curl_cache/"
    mkdir -p "$cache_dir"
    url_md5=$(echo "$1" | openssl md5 | cut -d " " -f 2)
    cached_filename="${cache_dir}${url_md5}_$(date '+%H').cached"
    if ls "$cached_filename" 2>&1 > /dev/null; then
        cat "$cached_filename"
    else
        if ! is_network_connected; then
            return 1
        fi
        # remove non-matching cached files (with expired time values)
        rm -rf "${cache_dir}${url_md5}"_*.cached
        curl_data=$(curl -s "$1")
        if [ $? -ne 0 ]; then
            return 1
        fi
        echo "$curl_data" | tee "$cached_filename"
    fi
}

crypto_price() {
    url="https://api.cryptonator.com/api/ticker/${1}-usd"
    api_response=$(cached_curl "$url")
    if [ $? -ne 0 ]; then
        return 1
    fi
    echo "$api_response" | egrep -o '"price":"[-0-9.]+"' | egrep -o "[-0-9]+\.[0-9]{2}"
}
crypto_change_1h() {
    url="https://api.cryptonator.com/api/ticker/${1}-usd"
    api_response=$(cached_curl "$url")
    if [ $? -ne 0 ]; then
        return 1
    fi
    change_usd=$(echo "$api_response" | egrep -o '"change":"[-0-9.]+"' | egrep -o "[-0-9]+\.[0-9]{2}")
    change_percent=$(echo "scale=1; 100 * $change_usd / $(crypto_price $1)" | bc -l)
    if ! echo "$change_percent" | grep "-" > /dev/null 2>&1 && [ $change_percent != "0" >/dev/null 2>&1 ]; then
        change_percent="+${change_percent}"
    fi
    echo "$change_percent"
}

# TODO: move the below stuff to a different script
exit 0

echo

price_width=9
change_width=8
printf "bitcoin: %${price_width}.${price_width}s %${change_width}.${change_width}s\n" "\$$(crypto_price btc)" "$(crypto_change_1h btc)% 1h"
printf "ethereum:%${price_width}.${price_width}s %${change_width}.${change_width}s\n" "\$$(crypto_price eth)" "$(crypto_change_1h eth)% 1h"
printf "monero:  %${price_width}.${price_width}s %${change_width}.${change_width}s\n" "\$$(crypto_price xmr)" "$(crypto_change_1h xmr)% 1h"




